// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Reason = require("reason");

function _wrap(f, x) {
  try {
    return /* Ok */Block.__(0, [Curry._1(f, x)]);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      var e = exn[1];
      var match = e.location;
      var match$1 = e.location;
      return /* Error */Block.__(1, [/* `RefmtParseError */[
                  -927764849,
                  /* record */[
                    /* message */e.message,
                    /* from */(match == null) ? /* record */[
                        /* line */0,
                        /* column */0
                      ] : /* record */[
                        /* line */match.startLine,
                        /* column */match.startLineStartChar
                      ],
                    /* until */(match$1 == null) ? /* record */[
                        /* line */0,
                        /* column */0
                      ] : /* record */[
                        /* line */match$1.endLine,
                        /* column */match$1.endLineEndChar
                      ]
                  ]
                ]]);
    } else {
      throw exn;
    }
  }
}

function parseML(param) {
  return _wrap((function (prim) {
                return Reason.parseML(prim);
              }), param);
}

function parseMLI(param) {
  return _wrap((function (prim) {
                return Reason.parseMLI(prim);
              }), param);
}

function parseRE(param) {
  return _wrap((function (prim) {
                return Reason.parseRE(prim);
              }), param);
}

function parseREI(param) {
  return _wrap((function (prim) {
                return Reason.parseREI(prim);
              }), param);
}

function printML(prim) {
  return Reason.printML(prim);
}

function printMLI(prim) {
  return Reason.printMLI(prim);
}

function printRE(prim) {
  return Reason.printRE(prim);
}

function printREI(prim) {
  return Reason.printREI(prim);
}

exports.parseML = parseML;
exports.parseMLI = parseMLI;
exports.parseRE = parseRE;
exports.parseREI = parseREI;
exports.printML = printML;
exports.printMLI = printMLI;
exports.printRE = printRE;
exports.printREI = printREI;
/* reason Not a pure module */
